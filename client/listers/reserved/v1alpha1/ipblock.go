/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/reserved/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpBlockLister helps list IpBlocks.
// All objects returned here must be treated as read-only.
type IpBlockLister interface {
	// List lists all IpBlocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpBlock, err error)
	// IpBlocks returns an object that can list and get IpBlocks.
	IpBlocks(namespace string) IpBlockNamespaceLister
	IpBlockListerExpansion
}

// ipBlockLister implements the IpBlockLister interface.
type ipBlockLister struct {
	indexer cache.Indexer
}

// NewIpBlockLister returns a new IpBlockLister.
func NewIpBlockLister(indexer cache.Indexer) IpBlockLister {
	return &ipBlockLister{indexer: indexer}
}

// List lists all IpBlocks in the indexer.
func (s *ipBlockLister) List(selector labels.Selector) (ret []*v1alpha1.IpBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpBlock))
	})
	return ret, err
}

// IpBlocks returns an object that can list and get IpBlocks.
func (s *ipBlockLister) IpBlocks(namespace string) IpBlockNamespaceLister {
	return ipBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpBlockNamespaceLister helps list and get IpBlocks.
// All objects returned here must be treated as read-only.
type IpBlockNamespaceLister interface {
	// List lists all IpBlocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpBlock, err error)
	// Get retrieves the IpBlock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpBlock, error)
	IpBlockNamespaceListerExpansion
}

// ipBlockNamespaceLister implements the IpBlockNamespaceLister
// interface.
type ipBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpBlocks in the indexer for a given namespace.
func (s ipBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpBlock))
	})
	return ret, err
}

// Get retrieves the IpBlock from the indexer for a given namespace and name.
func (s ipBlockNamespaceLister) Get(name string) (*v1alpha1.IpBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipblock"), name)
	}
	return obj.(*v1alpha1.IpBlock), nil
}
