/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/device/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkTypeLister helps list NetworkTypes.
// All objects returned here must be treated as read-only.
type NetworkTypeLister interface {
	// List lists all NetworkTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkType, err error)
	// NetworkTypes returns an object that can list and get NetworkTypes.
	NetworkTypes(namespace string) NetworkTypeNamespaceLister
	NetworkTypeListerExpansion
}

// networkTypeLister implements the NetworkTypeLister interface.
type networkTypeLister struct {
	indexer cache.Indexer
}

// NewNetworkTypeLister returns a new NetworkTypeLister.
func NewNetworkTypeLister(indexer cache.Indexer) NetworkTypeLister {
	return &networkTypeLister{indexer: indexer}
}

// List lists all NetworkTypes in the indexer.
func (s *networkTypeLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkType))
	})
	return ret, err
}

// NetworkTypes returns an object that can list and get NetworkTypes.
func (s *networkTypeLister) NetworkTypes(namespace string) NetworkTypeNamespaceLister {
	return networkTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkTypeNamespaceLister helps list and get NetworkTypes.
// All objects returned here must be treated as read-only.
type NetworkTypeNamespaceLister interface {
	// List lists all NetworkTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkType, err error)
	// Get retrieves the NetworkType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkType, error)
	NetworkTypeNamespaceListerExpansion
}

// networkTypeNamespaceLister implements the NetworkTypeNamespaceLister
// interface.
type networkTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkTypes in the indexer for a given namespace.
func (s networkTypeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkType))
	})
	return ret, err
}

// Get retrieves the NetworkType from the indexer for a given namespace and name.
func (s networkTypeNamespaceLister) Get(name string) (*v1alpha1.NetworkType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networktype"), name)
	}
	return obj.(*v1alpha1.NetworkType), nil
}
