/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CircuitLister helps list Circuits.
// All objects returned here must be treated as read-only.
type CircuitLister interface {
	// List lists all Circuits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Circuit, err error)
	// Circuits returns an object that can list and get Circuits.
	Circuits(namespace string) CircuitNamespaceLister
	CircuitListerExpansion
}

// circuitLister implements the CircuitLister interface.
type circuitLister struct {
	indexer cache.Indexer
}

// NewCircuitLister returns a new CircuitLister.
func NewCircuitLister(indexer cache.Indexer) CircuitLister {
	return &circuitLister{indexer: indexer}
}

// List lists all Circuits in the indexer.
func (s *circuitLister) List(selector labels.Selector) (ret []*v1alpha1.Circuit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Circuit))
	})
	return ret, err
}

// Circuits returns an object that can list and get Circuits.
func (s *circuitLister) Circuits(namespace string) CircuitNamespaceLister {
	return circuitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CircuitNamespaceLister helps list and get Circuits.
// All objects returned here must be treated as read-only.
type CircuitNamespaceLister interface {
	// List lists all Circuits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Circuit, err error)
	// Get retrieves the Circuit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Circuit, error)
	CircuitNamespaceListerExpansion
}

// circuitNamespaceLister implements the CircuitNamespaceLister
// interface.
type circuitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Circuits in the indexer for a given namespace.
func (s circuitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Circuit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Circuit))
	})
	return ret, err
}

// Get retrieves the Circuit from the indexer for a given namespace and name.
func (s circuitNamespaceLister) Get(name string) (*v1alpha1.Circuit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("circuit"), name)
	}
	return obj.(*v1alpha1.Circuit), nil
}
