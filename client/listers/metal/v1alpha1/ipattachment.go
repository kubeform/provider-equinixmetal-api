/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpAttachmentLister helps list IpAttachments.
// All objects returned here must be treated as read-only.
type IpAttachmentLister interface {
	// List lists all IpAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAttachment, err error)
	// IpAttachments returns an object that can list and get IpAttachments.
	IpAttachments(namespace string) IpAttachmentNamespaceLister
	IpAttachmentListerExpansion
}

// ipAttachmentLister implements the IpAttachmentLister interface.
type ipAttachmentLister struct {
	indexer cache.Indexer
}

// NewIpAttachmentLister returns a new IpAttachmentLister.
func NewIpAttachmentLister(indexer cache.Indexer) IpAttachmentLister {
	return &ipAttachmentLister{indexer: indexer}
}

// List lists all IpAttachments in the indexer.
func (s *ipAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.IpAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAttachment))
	})
	return ret, err
}

// IpAttachments returns an object that can list and get IpAttachments.
func (s *ipAttachmentLister) IpAttachments(namespace string) IpAttachmentNamespaceLister {
	return ipAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpAttachmentNamespaceLister helps list and get IpAttachments.
// All objects returned here must be treated as read-only.
type IpAttachmentNamespaceLister interface {
	// List lists all IpAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAttachment, err error)
	// Get retrieves the IpAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpAttachment, error)
	IpAttachmentNamespaceListerExpansion
}

// ipAttachmentNamespaceLister implements the IpAttachmentNamespaceLister
// interface.
type ipAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpAttachments in the indexer for a given namespace.
func (s ipAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAttachment))
	})
	return ret, err
}

// Get retrieves the IpAttachment from the indexer for a given namespace and name.
func (s ipAttachmentNamespaceLister) Get(name string) (*v1alpha1.IpAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipattachment"), name)
	}
	return obj.(*v1alpha1.IpAttachment), nil
}
