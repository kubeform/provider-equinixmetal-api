/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectAPIKeyLister helps list ProjectAPIKeys.
// All objects returned here must be treated as read-only.
type ProjectAPIKeyLister interface {
	// List lists all ProjectAPIKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectAPIKey, err error)
	// ProjectAPIKeys returns an object that can list and get ProjectAPIKeys.
	ProjectAPIKeys(namespace string) ProjectAPIKeyNamespaceLister
	ProjectAPIKeyListerExpansion
}

// projectAPIKeyLister implements the ProjectAPIKeyLister interface.
type projectAPIKeyLister struct {
	indexer cache.Indexer
}

// NewProjectAPIKeyLister returns a new ProjectAPIKeyLister.
func NewProjectAPIKeyLister(indexer cache.Indexer) ProjectAPIKeyLister {
	return &projectAPIKeyLister{indexer: indexer}
}

// List lists all ProjectAPIKeys in the indexer.
func (s *projectAPIKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectAPIKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectAPIKey))
	})
	return ret, err
}

// ProjectAPIKeys returns an object that can list and get ProjectAPIKeys.
func (s *projectAPIKeyLister) ProjectAPIKeys(namespace string) ProjectAPIKeyNamespaceLister {
	return projectAPIKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectAPIKeyNamespaceLister helps list and get ProjectAPIKeys.
// All objects returned here must be treated as read-only.
type ProjectAPIKeyNamespaceLister interface {
	// List lists all ProjectAPIKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectAPIKey, err error)
	// Get retrieves the ProjectAPIKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectAPIKey, error)
	ProjectAPIKeyNamespaceListerExpansion
}

// projectAPIKeyNamespaceLister implements the ProjectAPIKeyNamespaceLister
// interface.
type projectAPIKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectAPIKeys in the indexer for a given namespace.
func (s projectAPIKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectAPIKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectAPIKey))
	})
	return ret, err
}

// Get retrieves the ProjectAPIKey from the indexer for a given namespace and name.
func (s projectAPIKeyNamespaceLister) Get(name string) (*v1alpha1.ProjectAPIKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectapikey"), name)
	}
	return obj.(*v1alpha1.ProjectAPIKey), nil
}
