/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceNetworkTypeLister helps list DeviceNetworkTypes.
// All objects returned here must be treated as read-only.
type DeviceNetworkTypeLister interface {
	// List lists all DeviceNetworkTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceNetworkType, err error)
	// DeviceNetworkTypes returns an object that can list and get DeviceNetworkTypes.
	DeviceNetworkTypes(namespace string) DeviceNetworkTypeNamespaceLister
	DeviceNetworkTypeListerExpansion
}

// deviceNetworkTypeLister implements the DeviceNetworkTypeLister interface.
type deviceNetworkTypeLister struct {
	indexer cache.Indexer
}

// NewDeviceNetworkTypeLister returns a new DeviceNetworkTypeLister.
func NewDeviceNetworkTypeLister(indexer cache.Indexer) DeviceNetworkTypeLister {
	return &deviceNetworkTypeLister{indexer: indexer}
}

// List lists all DeviceNetworkTypes in the indexer.
func (s *deviceNetworkTypeLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceNetworkType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceNetworkType))
	})
	return ret, err
}

// DeviceNetworkTypes returns an object that can list and get DeviceNetworkTypes.
func (s *deviceNetworkTypeLister) DeviceNetworkTypes(namespace string) DeviceNetworkTypeNamespaceLister {
	return deviceNetworkTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceNetworkTypeNamespaceLister helps list and get DeviceNetworkTypes.
// All objects returned here must be treated as read-only.
type DeviceNetworkTypeNamespaceLister interface {
	// List lists all DeviceNetworkTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceNetworkType, err error)
	// Get retrieves the DeviceNetworkType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeviceNetworkType, error)
	DeviceNetworkTypeNamespaceListerExpansion
}

// deviceNetworkTypeNamespaceLister implements the DeviceNetworkTypeNamespaceLister
// interface.
type deviceNetworkTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceNetworkTypes in the indexer for a given namespace.
func (s deviceNetworkTypeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceNetworkType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceNetworkType))
	})
	return ret, err
}

// Get retrieves the DeviceNetworkType from the indexer for a given namespace and name.
func (s deviceNetworkTypeNamespaceLister) Get(name string) (*v1alpha1.DeviceNetworkType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicenetworktype"), name)
	}
	return obj.(*v1alpha1.DeviceNetworkType), nil
}
