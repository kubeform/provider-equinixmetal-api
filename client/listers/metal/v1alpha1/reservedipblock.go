/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReservedIPBlockLister helps list ReservedIPBlocks.
// All objects returned here must be treated as read-only.
type ReservedIPBlockLister interface {
	// List lists all ReservedIPBlocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReservedIPBlock, err error)
	// ReservedIPBlocks returns an object that can list and get ReservedIPBlocks.
	ReservedIPBlocks(namespace string) ReservedIPBlockNamespaceLister
	ReservedIPBlockListerExpansion
}

// reservedIPBlockLister implements the ReservedIPBlockLister interface.
type reservedIPBlockLister struct {
	indexer cache.Indexer
}

// NewReservedIPBlockLister returns a new ReservedIPBlockLister.
func NewReservedIPBlockLister(indexer cache.Indexer) ReservedIPBlockLister {
	return &reservedIPBlockLister{indexer: indexer}
}

// List lists all ReservedIPBlocks in the indexer.
func (s *reservedIPBlockLister) List(selector labels.Selector) (ret []*v1alpha1.ReservedIPBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReservedIPBlock))
	})
	return ret, err
}

// ReservedIPBlocks returns an object that can list and get ReservedIPBlocks.
func (s *reservedIPBlockLister) ReservedIPBlocks(namespace string) ReservedIPBlockNamespaceLister {
	return reservedIPBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReservedIPBlockNamespaceLister helps list and get ReservedIPBlocks.
// All objects returned here must be treated as read-only.
type ReservedIPBlockNamespaceLister interface {
	// List lists all ReservedIPBlocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReservedIPBlock, err error)
	// Get retrieves the ReservedIPBlock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReservedIPBlock, error)
	ReservedIPBlockNamespaceListerExpansion
}

// reservedIPBlockNamespaceLister implements the ReservedIPBlockNamespaceLister
// interface.
type reservedIPBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReservedIPBlocks in the indexer for a given namespace.
func (s reservedIPBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReservedIPBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReservedIPBlock))
	})
	return ret, err
}

// Get retrieves the ReservedIPBlock from the indexer for a given namespace and name.
func (s reservedIPBlockNamespaceLister) Get(name string) (*v1alpha1.ReservedIPBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("reservedipblock"), name)
	}
	return obj.(*v1alpha1.ReservedIPBlock), nil
}
