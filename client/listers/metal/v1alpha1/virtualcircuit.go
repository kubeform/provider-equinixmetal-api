/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualCircuitLister helps list VirtualCircuits.
// All objects returned here must be treated as read-only.
type VirtualCircuitLister interface {
	// List lists all VirtualCircuits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualCircuit, err error)
	// VirtualCircuits returns an object that can list and get VirtualCircuits.
	VirtualCircuits(namespace string) VirtualCircuitNamespaceLister
	VirtualCircuitListerExpansion
}

// virtualCircuitLister implements the VirtualCircuitLister interface.
type virtualCircuitLister struct {
	indexer cache.Indexer
}

// NewVirtualCircuitLister returns a new VirtualCircuitLister.
func NewVirtualCircuitLister(indexer cache.Indexer) VirtualCircuitLister {
	return &virtualCircuitLister{indexer: indexer}
}

// List lists all VirtualCircuits in the indexer.
func (s *virtualCircuitLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualCircuit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualCircuit))
	})
	return ret, err
}

// VirtualCircuits returns an object that can list and get VirtualCircuits.
func (s *virtualCircuitLister) VirtualCircuits(namespace string) VirtualCircuitNamespaceLister {
	return virtualCircuitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualCircuitNamespaceLister helps list and get VirtualCircuits.
// All objects returned here must be treated as read-only.
type VirtualCircuitNamespaceLister interface {
	// List lists all VirtualCircuits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualCircuit, err error)
	// Get retrieves the VirtualCircuit from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualCircuit, error)
	VirtualCircuitNamespaceListerExpansion
}

// virtualCircuitNamespaceLister implements the VirtualCircuitNamespaceLister
// interface.
type virtualCircuitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualCircuits in the indexer for a given namespace.
func (s virtualCircuitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualCircuit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualCircuit))
	})
	return ret, err
}

// Get retrieves the VirtualCircuit from the indexer for a given namespace and name.
func (s virtualCircuitNamespaceLister) Get(name string) (*v1alpha1.VirtualCircuit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualcircuit"), name)
	}
	return obj.(*v1alpha1.VirtualCircuit), nil
}
