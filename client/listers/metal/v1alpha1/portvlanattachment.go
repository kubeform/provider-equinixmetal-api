/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PortVLANAttachmentLister helps list PortVLANAttachments.
// All objects returned here must be treated as read-only.
type PortVLANAttachmentLister interface {
	// List lists all PortVLANAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PortVLANAttachment, err error)
	// PortVLANAttachments returns an object that can list and get PortVLANAttachments.
	PortVLANAttachments(namespace string) PortVLANAttachmentNamespaceLister
	PortVLANAttachmentListerExpansion
}

// portVLANAttachmentLister implements the PortVLANAttachmentLister interface.
type portVLANAttachmentLister struct {
	indexer cache.Indexer
}

// NewPortVLANAttachmentLister returns a new PortVLANAttachmentLister.
func NewPortVLANAttachmentLister(indexer cache.Indexer) PortVLANAttachmentLister {
	return &portVLANAttachmentLister{indexer: indexer}
}

// List lists all PortVLANAttachments in the indexer.
func (s *portVLANAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.PortVLANAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortVLANAttachment))
	})
	return ret, err
}

// PortVLANAttachments returns an object that can list and get PortVLANAttachments.
func (s *portVLANAttachmentLister) PortVLANAttachments(namespace string) PortVLANAttachmentNamespaceLister {
	return portVLANAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PortVLANAttachmentNamespaceLister helps list and get PortVLANAttachments.
// All objects returned here must be treated as read-only.
type PortVLANAttachmentNamespaceLister interface {
	// List lists all PortVLANAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PortVLANAttachment, err error)
	// Get retrieves the PortVLANAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PortVLANAttachment, error)
	PortVLANAttachmentNamespaceListerExpansion
}

// portVLANAttachmentNamespaceLister implements the PortVLANAttachmentNamespaceLister
// interface.
type portVLANAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PortVLANAttachments in the indexer for a given namespace.
func (s portVLANAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PortVLANAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortVLANAttachment))
	})
	return ret, err
}

// Get retrieves the PortVLANAttachment from the indexer for a given namespace and name.
func (s portVLANAttachmentNamespaceLister) Get(name string) (*v1alpha1.PortVLANAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("portvlanattachment"), name)
	}
	return obj.(*v1alpha1.PortVLANAttachment), nil
}
