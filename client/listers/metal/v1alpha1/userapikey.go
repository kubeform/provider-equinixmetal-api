/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserAPIKeyLister helps list UserAPIKeys.
// All objects returned here must be treated as read-only.
type UserAPIKeyLister interface {
	// List lists all UserAPIKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserAPIKey, err error)
	// UserAPIKeys returns an object that can list and get UserAPIKeys.
	UserAPIKeys(namespace string) UserAPIKeyNamespaceLister
	UserAPIKeyListerExpansion
}

// userAPIKeyLister implements the UserAPIKeyLister interface.
type userAPIKeyLister struct {
	indexer cache.Indexer
}

// NewUserAPIKeyLister returns a new UserAPIKeyLister.
func NewUserAPIKeyLister(indexer cache.Indexer) UserAPIKeyLister {
	return &userAPIKeyLister{indexer: indexer}
}

// List lists all UserAPIKeys in the indexer.
func (s *userAPIKeyLister) List(selector labels.Selector) (ret []*v1alpha1.UserAPIKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserAPIKey))
	})
	return ret, err
}

// UserAPIKeys returns an object that can list and get UserAPIKeys.
func (s *userAPIKeyLister) UserAPIKeys(namespace string) UserAPIKeyNamespaceLister {
	return userAPIKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserAPIKeyNamespaceLister helps list and get UserAPIKeys.
// All objects returned here must be treated as read-only.
type UserAPIKeyNamespaceLister interface {
	// List lists all UserAPIKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserAPIKey, err error)
	// Get retrieves the UserAPIKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserAPIKey, error)
	UserAPIKeyNamespaceListerExpansion
}

// userAPIKeyNamespaceLister implements the UserAPIKeyNamespaceLister
// interface.
type userAPIKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserAPIKeys in the indexer for a given namespace.
func (s userAPIKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserAPIKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserAPIKey))
	})
	return ret, err
}

// Get retrieves the UserAPIKey from the indexer for a given namespace and name.
func (s userAPIKeyNamespaceLister) Get(name string) (*v1alpha1.UserAPIKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userapikey"), name)
	}
	return obj.(*v1alpha1.UserAPIKey), nil
}
