/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-equinixmetal-api/apis/metal/v1alpha1"
	"kubeform.dev/provider-equinixmetal-api/client/clientset/versioned/scheme"

	rest "k8s.io/client-go/rest"
)

type MetalV1alpha1Interface interface {
	RESTClient() rest.Interface
	BgpSessionsGetter
	ConnectionsGetter
	DevicesGetter
	DeviceNetworkTypesGetter
	IpAttachmentsGetter
	OrganizationsGetter
	PortVLANAttachmentsGetter
	ProjectsGetter
	ProjectAPIKeysGetter
	ProjectSSHKeysGetter
	ReservedIPBlocksGetter
	SpotMarketRequestsGetter
	SshKeysGetter
	UserAPIKeysGetter
	VirtualCircuitsGetter
	VlansGetter
	VolumesGetter
	VolumeAttachmentsGetter
}

// MetalV1alpha1Client is used to interact with features provided by the metal.equinixmetal.kubeform.com group.
type MetalV1alpha1Client struct {
	restClient rest.Interface
}

func (c *MetalV1alpha1Client) BgpSessions(namespace string) BgpSessionInterface {
	return newBgpSessions(c, namespace)
}

func (c *MetalV1alpha1Client) Connections(namespace string) ConnectionInterface {
	return newConnections(c, namespace)
}

func (c *MetalV1alpha1Client) Devices(namespace string) DeviceInterface {
	return newDevices(c, namespace)
}

func (c *MetalV1alpha1Client) DeviceNetworkTypes(namespace string) DeviceNetworkTypeInterface {
	return newDeviceNetworkTypes(c, namespace)
}

func (c *MetalV1alpha1Client) IpAttachments(namespace string) IpAttachmentInterface {
	return newIpAttachments(c, namespace)
}

func (c *MetalV1alpha1Client) Organizations(namespace string) OrganizationInterface {
	return newOrganizations(c, namespace)
}

func (c *MetalV1alpha1Client) PortVLANAttachments(namespace string) PortVLANAttachmentInterface {
	return newPortVLANAttachments(c, namespace)
}

func (c *MetalV1alpha1Client) Projects(namespace string) ProjectInterface {
	return newProjects(c, namespace)
}

func (c *MetalV1alpha1Client) ProjectAPIKeys(namespace string) ProjectAPIKeyInterface {
	return newProjectAPIKeys(c, namespace)
}

func (c *MetalV1alpha1Client) ProjectSSHKeys(namespace string) ProjectSSHKeyInterface {
	return newProjectSSHKeys(c, namespace)
}

func (c *MetalV1alpha1Client) ReservedIPBlocks(namespace string) ReservedIPBlockInterface {
	return newReservedIPBlocks(c, namespace)
}

func (c *MetalV1alpha1Client) SpotMarketRequests(namespace string) SpotMarketRequestInterface {
	return newSpotMarketRequests(c, namespace)
}

func (c *MetalV1alpha1Client) SshKeys(namespace string) SshKeyInterface {
	return newSshKeys(c, namespace)
}

func (c *MetalV1alpha1Client) UserAPIKeys(namespace string) UserAPIKeyInterface {
	return newUserAPIKeys(c, namespace)
}

func (c *MetalV1alpha1Client) VirtualCircuits(namespace string) VirtualCircuitInterface {
	return newVirtualCircuits(c, namespace)
}

func (c *MetalV1alpha1Client) Vlans(namespace string) VlanInterface {
	return newVlans(c, namespace)
}

func (c *MetalV1alpha1Client) Volumes(namespace string) VolumeInterface {
	return newVolumes(c, namespace)
}

func (c *MetalV1alpha1Client) VolumeAttachments(namespace string) VolumeAttachmentInterface {
	return newVolumeAttachments(c, namespace)
}

// NewForConfig creates a new MetalV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*MetalV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &MetalV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new MetalV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *MetalV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new MetalV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *MetalV1alpha1Client {
	return &MetalV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *MetalV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
